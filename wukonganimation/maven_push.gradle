apply plugin: 'maven-publish'
apply plugin: 'signing'
Properties properties = new Properties()
def file = new File(rootProject.projectDir, 'local.properties')
if (null != file && file.exists()) {
    properties.load(new FileInputStream(file))
}

ext["signing.keyId"] = properties.getProperty('signing.keyId')
ext["signing.password"] = properties.getProperty('signing.password')
ext["signing.secretKeyRingFile"] = properties.getProperty('signing.secretKeyRingFile')
ext["ossrhUsername"] = properties.getProperty('maven.username')
ext["ossrhPassword"] = properties.getProperty('maven.password')

def GROUP_ID = 'io.github.wufuqi123'
def ARTIFACT_ID = 'wukonganimation'
def VERSION_NAME = '1.0.0'
//指定快照版本 maven仓库url
def SNAPSHOTS_REPO_URL = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
//指定正式版本 maven仓库url
def RELEASES_REPO_URL = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'

//上传到Maven仓库的task
afterEvaluate {
    publishing {
        repositories {
            maven {
                //仓库默认不支持Https,所有这里设置成false.
                allowInsecureProtocol = false
                url = VERSION_NAME.endsWith('SNAPSHOT') ? SNAPSHOTS_REPO_URL : RELEASES_REPO_URL
                credentials {
                    username = ossrhUsername //maven仓库账号
                    password = ossrhPassword //maven仓库账号
                }
            }
        }
        publications {
            release(MavenPublication) {
                //添加这个，否则aar文件不上传
                //from components.release
                artifact(tasks.getByName("bundleReleaseAar"))
                //artifact(androidJavadocsJar)
                artifact(androidSourcesJar)
                groupId = GROUP_ID // 唯一标识（通常为模块包名，也可以任意）
                artifactId = ARTIFACT_ID // 项目名称（通常为类库模块名称，也可以任意）
                version = VERSION_NAME // 版本号
                pom {
                    name = ARTIFACT_ID
                    description = '一个优雅的android属性动画库。An elegant android property animation library.'
                    // If your project has a dedicated site, use its URL here
                    url = 'https://github.com/wufuqi123/WuKongAnimation'
                    licenses {
                        license {
                            //协议类型，一般默认Apache License2.0的话不用改：
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'wufuqi123'
                            name = 'wufuqi123'
                            email = '1090323359@qq.com'
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        //修改成你的Git地址：
                        connection = 'scm:git@github.com:wufuqi123/WuKongAnimation.git'
                        developerConnection = 'scm:git@github.com:wufuqi123/WuKongAnimation.git'
                        //分支地址：
                        url = 'https://github.com/wufuqi123/WuKongAnimation/tree/master'
                    }
                    // A slightly hacky fix so that your POM will include any transitive dependencies
                    // that your library builds upon
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.release
        sign configurations.archives
    }
}

// 生成文档注释
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.srcDirs
}

// 将文档打包成jar,生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

// 将源码打包 ，生成sources.jar
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

//配置需要上传到maven仓库的文件
artifacts {
    archives androidSourcesJar //将源码打包进aar,这样使用方可以看到方法注释.
    archives androidJavadocsJar //将注释打包进aar
}
